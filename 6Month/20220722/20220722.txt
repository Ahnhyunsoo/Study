지형을 타려면 지형을 타는 버퍼의 위치를 받아온다.
인덱스 구하고 어느 삼각형 위에 있는지 구해서
그삼각형의 평면의 방정식을 구한다.
Plane일 때 인덱스 넣어주는 순서가 중요한데 시계방향이냐 반시계방향이냐에 따라서 앞면 뒷면이 구분된다.

y = (-ax -cz - d) / b

컴포넌트 검색기능 만든다.

LandObject는 게임오브젝트의 자식이며 플레이어와 몬스터의 부모클래스이다.
LandObject에 지형을 태운다는 기능을 구현한다.

지형버퍼들의 부모를 만드는게 좋을수도있는데 복잡해질수도있다.

미우스피킹
윈도우로 마우스좌표구하고 스크린투포지션으로 좌표구하고
3차원 스페이스로 변환시켜서 충돌시킨다.

카메라와 피킹한 점을 이용해 방향벡터를 구하고 이걸 확정시켜서 이 방향벡터가 지나가는건 충돌됐다고 처리한다.

피킹한 z축은 near라고 판단하는게 편한다.

방향벡터와 삼각형의 충돌을 구현하자.

구한 마우스좌표를 투영스페이스로 바꾸는 작업을 한다.

x,y,0 이라는 위치벡터에 투영행렬 역행렬을 구하면 뷰스페이스로 온다.

방향벡터에서 카메라 위치를 빼야하는데 카메라 위치는 원점이기 때문에 방향벡터가 즉 마우스의 레이다.

삼각형의 점3개 레이, 레이포스

U , V , DIST를 구해준다.

DIST로 충돌된 위치를 구하려면 인자로 넣는 LAYDIR이 반드시 정규화해서 넣어줘야한다.

DIST = 레이pos와 충돌된 지점까지의 거리

U = 충돌했을 때 위치와 인자로 넣어준 점2개 선분 사이의길이


V = 충돌했을 때 위치와 인자로 넣어준 점2개 선분 사이의길이

UV는 쓰지말고 DIST로 하자

마우스 피킹은 엔진에 피킹이라는 싱글톤 클래스를 만들고
피킹 클래스에 틱이라는 함수를 만든다. 매 프레임마다 호출하고 게임인스턴스에서 계속 호출해준다.
피킹 클래스의 틱에서 겟커서포스로 마우스좌표를 얻어오고 장치로 투영스페이스의 역행렬을 구해서 곱한다.
그래서 레이와 레이포스 구하고 장치로 뷰행렬의 역행렬을 구하고
레이와 레이포스에 곱해서 월드변환을 한다. 이게 틱에서 하는 작업이다.
실제로 로컬까지 내려가는건 클라에서 해준다.
카메라 틱이 끝나면 피킹틱을 호출해준다.