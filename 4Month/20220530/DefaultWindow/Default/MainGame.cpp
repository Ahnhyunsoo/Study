#include "stdafx.h"
#include "MainGame.h"


CMainGame::CMainGame()
	: m_pPlayer(nullptr)
{
}


CMainGame::~CMainGame()
{
	Release();
}

void CMainGame::Initialize(void)
{
	m_hDC = GetDC(g_hWnd);

	if (!m_pPlayer)
	{
		m_pPlayer = new CPlayer;
		m_pPlayer->Initialize();
	}

}

void CMainGame::Update(void)
{
	m_pPlayer->Update();
}

void CMainGame::Render(void)
{
	Rectangle(m_hDC, 0, 0, WINCX, WINCY);

	m_pPlayer->Render(m_hDC);
}

void CMainGame::Release(void)
{
	Safe_Delete<CObj*>(m_pPlayer);

	ReleaseDC(g_hWnd, m_hDC);	
}

/*
행렬 : 여러 숫자들의 형태를 행과 열의 상태로 표현한 것
dx에서 4x4짜리 float형 16개짜리 맴버 변수가 있는 행렬을 제공한다.

행렬의 사용 이유 : 객체의 여러 상태(크기, 회전, 위치)를 표현하기 위함이다.

행과 열의 갯수가 같은 행렬 = 정방행렬

앞의 행렬의 열과 뒷 행렬의 행이 같아야 곱셉이 가능하다.

행렬의 곱셈 시, 앞의 행렬의 행과 뒤의 행렬의 열의 상태로 결과 행렬이 발생한다.

행렬의 곱셈은 교환법칙이 항상 성립하지는 않는다.

맴버변수의 값이 전부 0인 상태는 초기화된 상태가 아니다.

항등행렬 : 항상 같은 행렬 , 대각선으로 1인 행렬

행렬의 초기화는 항등행렬로 만들어주는 것이다. ********중요

A 행렬과 항등행렬을 곱하면 항상 A 행렬이 나온다.

그래서 항등행렬과 곱셈시에는 항상 교환법칙이 성립한다.

A 행렬과 A행렬의 역행렬을 곱하면 항등 행렬이 된다.

랜더링파이프라인은 총 9개 앞에 2개는 로컬스페이스와 월드스페이스

로컬스페이스

월드스페이스 실제 게임에서 사용되는 크기 회전 위치가 적용된 정점의 상태

로컬스페이스 상에 놓여있는 정점과 행렬의 곱셈을 통하여 월드 스페이스 상의 정점으로 변환을 해주는데 이를 가리켜 월드 변환이라 한다.

우측대각선 (11 22 33)은 크기 배율이다.
			(41,42,43) x y z  월드 기준의 좌표를 옮긴다. 위치값
			14,24,34,44 는 w라서 신경쓸 필요가 없다.
			22,23,32,33 = x축의 회전에 영향을 받는 원소들
			11,31,13,33 = y축의 회전에 영향을 받는 원소들
			11,12,21,22 = z축의 회전에 영향을 받는 원소들

월드 행렬이란 크기, 회전, 이동 값의 상태가 모두 곱하여져서 최종적인 결과를 저장하는 행렬을 말한다.
월드 행렬을 구성하기 위해선 크기 행렬, 회전 행렬, 이동 행렬이 독립적으로 존재하고 이 행렬들을 순서에 맞게 곱해야 한다,
월드 행렬의 곱셈 순서 : 크(스) * 자 * 이 * 공 * 부

월드행렬 = 크 = 크기행렬 * 자전 행렬(회전) * 이동 행렬(위치) * 공전 행렬(회전) * 부모 행렬(부모의 월드 행렬)

공전을 하려면 부모행렬이 필수다. 부모회전을 기준으로 회전하기 때문이다.

행렬의 원소가 중복이 일어날 수 있기 때문에 행렬곱셈순서를 꼭 지켜야한다.

크기를 먼저 곱하고 그 곱한 행렬에 위치변화를 주는 식이다.

고정된 랜더링 파이프 라인

이 순서를 커스터마이징 한게 쉐이더

D3DXMatrixIdentity 항등행렬로 초기화해주는 함수

dx함수는 함수에 넣어주는 1인자는 넣자마자 항등행렬로 만들어준다.

z축 회전을 이용하여 포신과 몸체가 따로 돌아가는 탱크 만들어오기

탱크는 몸체 회전 방향으로 나아간다.

이동은 탱크의 몸체로 이동 a,d로 탱크몸체회전 w,s는 전진후진

포신은 회전가능 총알은 포신에서 나가게

*/