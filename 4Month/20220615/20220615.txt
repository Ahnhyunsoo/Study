길찾기 알고리즘 에이스타
깊이우선탐색  
너비우선탐색 
설명할 수 있어야한다.

AStar = 길찾기 알고리즘
깊이우선탐색  
너비우선탐색 
두가지의 형태가 혼합되어있는 알고리즘이다.

AStar 알고리즘은 최단거리를 찾는 알고리즘이다? 그럴수도있고 아닐수도있다.

그래프 = 정점과 간선의 집합

정점 = 데이터
간선 = 관계

무방향성 그래프
방향성 그래프

그래프를 구현할 때 행렬보단 리스트 방식을 많이 사용한다.

깊이우선탐색   DFS 더이상 갈곳이 없을 때 까지 깊이들어간다.
왔던길을 되돌아가는걸 백트래킹이라고한다.
이동할 때 스택에 내가 왔던위치를 저장하고 이걸통해 돌아올 수 있다.

깊이우선탐색은 확률에 의존적인 알고리즘이기 때문에 최단거리를 찾을 수도있지만 최악의거리를 찾을수도있다.

다녀왔던곳의 노드만을 기억하기때문에 메모리 소비가 적다.


너비우선탐색  BFS 
모든 경우의 수를 전부 확인할 수 있다.
메모리 소비가 크다.
정확도가 굉장히 높다. 최단거리를 보장하는 이점이 생긴다.

휴리스틱기법
좀 더 확률에 영향을 덜받이 위해사용하는 방법.

오픈리스트 갈수있는 노드를 저장하는 리스트
클로즈리스트 이미 가본 노드를 저장하는 리스트
베스트리스트 최종적으로 나온 결과값을 저장하는 리스트

iParentIndex 내가왔던 이전 노드의 인덱스

홀수에서 짝수로 이동할 때 20감소
짝수에서 홀수로이동할 때 21감소

홀수에서 짝수로이동 19감소
짜굿에서 홀수이동 20감소 
