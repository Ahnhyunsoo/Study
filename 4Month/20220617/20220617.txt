컨텍스트 스위칭
1. 컨텍스트 스위칭을 사용하지않으면 멀티프로세스를 할 수 없다.
2. 컨텍스트 스위칭은 궁극적인 해결방법이 있다.

커널오브젝트
윈도우 운영체제는 프로세스 쓰레드 혹은 파일과 같은 리소스들을 원활히 관리하기 위해
필요한 정보를 저장해야 하는데 이때 데이터를 저장하는 메모리 블록을 가리켜 커널 오브젝트라고 한다.
프로세스, 쓰레드, 파일등을 가리켜 리소스라고한다.
핸들이 커널오브젝트에 접근할 수 있는 근거다.

쓰레드는 하나의 프로그램내에서 여러개의 실행 흐름을 두기 위함이다.

모드의 전환은 시스템에 부담을 주는 일이다.

커널모드와 유저모드를 전환하는일 = new , delete이다.

멀티스레드를 사용하는 이유 = 컨텍스트 스위칭을 최소하 하기 위해서

★데드락★
교착상태로 병목현상 이라고도 얘기하며 서로가 서로의 실행이 끝나기만을 기다리는 현상이다.

시스템프로그래밍 동기화와 관련된 부분 중요.
크리티컬섹션 동기화 - 유저모드 동기화
유텍스, 세마포어, 이름있는유텍스, 이벤트 - 커널 모드 동기화

크리티컬섹션 (임계영역)
공유 되어지는 영역 (코드 데이터 힙)

stdcall은 반드시 size_t를 반환하게 만들어줘야한다.

디바이스 초기화에서 버텍스프로세싱 여부에 or연산해서 멀티프로세스를 사용한다고 알줘야한다.

분기를 둬서 스레드매니저를 통한 조건에따라 스레드호출을 만드는게 좋을 수 있다.

메모리 단편화 = 메모리 조각화 , 조각난 메모리로 인해 메모리가 낭비되거나 충분한 메모리가 있음에도 불구하고 사용불가능한 현상
new, delete를 하면 유저모드에서 커널모드로 바뀐다.

내부 단편화 = 실제 필요한 메모리보다 초과되는 크기로 할당되어 이때 남는 부분이 낭비되는 것을 의미 (ex : 구조체)
외부 단편화 = 빈번한 메모리 할당, 해제 시 메모리가 중간중간 비게 되는 현상

메모리 풀링 = 메모리를 미리 할당하여 계속적으로 재활용하는 형태를 둬서 단펴화를 최소화하는 기법
재활용
