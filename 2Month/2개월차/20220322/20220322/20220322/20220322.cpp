// 20220322.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"

CStudent::CStudent()
{
	cout << "생성자 호출" << endl;
}
CStudent::~CStudent()
{
	cout << "소멸자 호출" << endl;
}

int main()
{
	//void Initialize(void) // 초기화 해주는 함수
	//void Update(void) //매 프레임마다 갱신해주는 함수
	//void Release(void) // 
	
	//생성자 : 선언과 동시에 초기화 해주는 문법

public:
	CStudent(); // 생성자 : 객체가 생성되는 시점에 호출된다.
	~CStudent(); // 소멸자 : 객체가 소멸되는 시점에 호출된다.
	/*
	객체가 생성될 때 내부적으로 자동생성되는 네 가지
	1. default 생성자, 2. default 복사 생성자, 3. default 대입 연산자, 4. 소멸자
	default 생성자는 프로그래머가 직접적으로 구현한 생성자가 단 한개라도 존재하면
	생성 , 호출되지 않는다.

	소멸자를 구현해주지 않을 경우 자동 default 소멸자가 호출된다.
	소멸자는 반드시 기본타입 하나 밖에 없다.(절대 오버로딩 불가능)

	객체의 생성과정은 다음과 같다.
	1. 메모리 할당 -> 2. 생성자 호출 ★★★ (객체가 생성되면 생성자가 무조건 호출된다)
	생성과 동시에 초기화는 아니나(메모리가 먼저 할당되기때문)
	그러나 객체를생성하면 생성자가 무조건 호출되기때문에 유효성을 갖게된다.
	이것때문에 선언과 동시에 초기화라고 봐도되지만 엄밀히 따지면 대입이다.
	생성자가 1개일 경우는 클래스내에서 선언과 동시에 초기화해도 괜찮지만
	생성자가 여러개일 경우 문제를 야기할 수 있다.
	여러개의 생성자
	오버로딩
	CStudent()
	CStudent(int _iSize)
	클래스 포인터를 malloc 이나 calloc으로 동적할당했을 때 생성자 호출이 안된다.★★
	c의 구조체는 맴버함수를 가질수없으나 c++ 구조체는 맴버함수를 가질수있다.
	중요한건 기본생성자냐 사용자가정의한 생성자이냐 이다.

	c시절에 동적할당한 메모리를 해제하는 함수 free는 객체의 소멸자를 호출할 수 없다.★★

	객체의 소멸과정
	1. 소멸자 호출 2. 메모리 반환





	

	*/

    return 0;
}

