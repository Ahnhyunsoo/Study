20220331 복습

일반화 프로그래밍 (제네릭 프로그래밍) : 데이터 형식에 의존하지 않고, 하나의 값이 여러 다른 데이터 타입들을 가질 수 있는 기술에 중점을 두어 재사용성을 높일 수 있는 프로그래밍 방식
인라인 함수 : 컴파일 시점에 함수 호출위치에 바로 코드를 삽입하는 형태의 함수
매크로와 달리 자료형에 대해서 자유로울 수 없다.
인라인함수를 선언하더라도 컴파일러의 판단하에 인라인화 시키기 때문에 큰 의미는 없다.
인라인 함수는 선언과 정의가 한꺼번에 묶어져 있어야 인라인화가 가능하다.

인라인 함수를 선언하더라도 일반함수로 바뀌는 경우
1. 인라인 함수를 함수 포인터로 활용할 때
2. 인라인 함수를 재귀 형태로 호출할 때
-> 함수포인터나 재귀함수를 이용하려면 메모리에 있는 함수주소를 참조해야하는데 인라인 함수는 메모리를 할당하지 않기 때문에 메모리를 할당하는 일반함수로 바뀐다.

연산자 오버로딩 : 연산자에 적용을 시킨 함수 오버로딩의 문법
1. 본래 연산자의 기능을 뒤바꿀순 없다.
2. 사용자 정의 자료형일 때 성립하는 문법이다. (클래스, 구조체)
3. 클래스 맴버로만 존재할 수 있는 연산자 =, (), [], ->, 좌측 기준으로만 연산을 수행하는 연산자들
연산자오버로딩은 자주쓰진않으니 어떻게 쓰는지 이해하고 가는게 좋다.
단항 연산자 오버로딩시 리턴타입을 원본으로 해줘야한다. 1번만 할 때는 상관없는데 여러번 이용시 적용값이 누적돼야하기때문


함수 객체(funtor) : ()연산자 오버로딩을 통해 객체를 함수처럼 사용하는 문법


임시 객체 = 코드라인을 벗어나면 소멸되는 특성을 갖고 있다.
생성자로 구현 / 객체를 선언하지않고 객체내에 매개변수를 대입해서 사용가능하다.

임시객체 
CA -> 호출은 하지만 별명이 없기때문에 이 객체는 이줄이 끝나면 더이상 사용할수가없으므로
컴파일러가 임시메모리에 올려두고 줄이 끝나면 다음줄에서 삭제한다.
