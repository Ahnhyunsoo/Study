// 20220325.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"

//class CObj
//{
//private:
//	int m_iA;
//public:
//	void Render() { cout << m_iA << endl; }
//public:
//	CObj(int _iA) : m_iA(_iA)
//	{
//
//	}
//	CObj(CObj)
//};

//몬스터 1000마리 맴버변수30개 
//객체1개당 30번초기화작업실행 1000마리면 30000번
//복사생성자를 사용하면 메모리 블럭단위로 복사를 실행 
//스택 = 후입선출

//얕은 복사(shallow copy)생성자 하나의 주소를 2개의 포인터가 가르키는것
//각각의 포인터가 각각의 주소를 가르키게 하면된다.
//각자의 포인터를 해줬으니 해제할 때도 각자의 포인터를 해제한다.
//깊은 복사(deep copy)생성자 같은 주소를 공유하지 않는것



//복사생성자가 있으면 디폴트생성자는 호출이 안된다.
//그래서 복사생성자를 만들면 기본생성자도 무조건 만들어줘야한다.

/*
복사생성자 호출하는예시
1. 먼저 만든 원본 객체를 사본 객체의 매개변수로 할 때 복사 생성자를 호출
2. 함수의 매개 변수가 객체 타입인 경우 복사 생성자를 호출
3. 함수의 반환 타입이 객체 타입인 경우 복사 생성자를 호출
*/

//class CObj
//{
//private:
//	int m_iA;
//
//public:
//	void Render(int _iA) 
//	{ 
//		m_iA = _iA;
//		cout << _iA << endl; 
//	}
//};

//int main()
//{
//	//this포인터
//	//모든 맴버변수에는 this->가 생략되어있다. 그래서 어떤객체의 맴버변수인지 this를 통해 알수있다. 
//	//this = 생성된 객체 자신의 주소를 저장하는 상수 포인터이다.
//
//	//전역변수여도 결국에 하나의 파일에서만 유효성을 갖는다.
//	//extern = 같은 전역변수 또는 전역 함수를 여러개의 파일에서 공간에서 공유하여 사용할 수 있게 만드는 문법
//	//extern 만 모아놓은 파일을 제작하는 것이 사용상 편리할 수 있다.
//	//extern을 사용할 때 변수인 경우 자료형과 변수 이름이 동일해야 한다.
//	//또, extern이 붙은 변수는 선언과 동시에 초기화가 불가능하다.
//	//extern은 문법적인 허용이지 변수를 선언하는 행위가 아니다. (메모리가 할당되지않음)
//
//	//상점을 만들고 아이템을 구현해서 사는것까지 구현해라
//	//상점도 초급상점 중급상점 고급상점이 있고 상점에따라 파는 물품이 달라진다.
//
//	
//	//CObj obj(50);
//	//CObj Temp(obj); //default 복사 생서자 호출
//
//	//Temp.Render();
//    return 0;
//}


class Test
{
private:
	int m_a;

public:
	Test()
	{

	}

	Test(int _a) : m_a(_a)
	{
		cout << "기본 생성자 호출" << endl;
	}


	//Test(Test& t)
	//{
	//	t.m_a = 10;
	//	m_a = t.m_a;
	//	cout << "복사생성자 호출" << endl;
	//}

	void Print() { cout << this << endl; }
};




void main(void)
{
	Test t(20);
	t.Print();
	Test a(10);
	a.Print();
	
	
}

