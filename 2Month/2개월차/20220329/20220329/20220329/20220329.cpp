// 20220329.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"

/*
다형성에는 오버라이딩과 캐스팅이 있다.
오버로딩은 함수의 문법 오버라이딩은 클래스의 문법
같은이름의 함수일때 함수의 매개변수 타입이나 매개변수 갯수에 따라 정해지는게 함수 오버로딩

상속을 하면
부모타입으로 쓴다는게 전제로 깔린다.
부모자료형으로 통일시켜서 관리하고싶다. 부모자료형으로 접근해서 자식자료형을 직접적으로 바꾼다.
다형성 = 부모가 자식의 함수를 사용하기위한 문법
virtual 함수앞에 붙이면 가상함수로 만든다.
virtual가 하나라도 존재하면 가상함수포인터 가상함수테이블이 생성된다
가상함수포인터는 코드영역에 생성된다.
가상함수테이블에 (가상함수들만) 가상함수포인터들의 주소를 올려둔다.
가상함수포인터를 통해서 가상함수테이블을 참조해서 가상함수를 호출할 수 있게 한다.
소유한 가상함수포인터를 통해 테이블에 참조해서 함수를 가져와야한다.
함수를 가지고 있는게아닌 함수포인터(주소)만 가지고 있는거다.
반환타입 , 이름, 매개변수가 모두 일치한다면 부모클래스에 버츄얼이 있으면 자식클래스도 버츄얼이 붙어있는것이다.
객체를 생성할 때 어느 자식객체인지가 중요하다.
상속 = 컴파일 타이밍에 어떤 자료형인지결정
다형성 = 컴파일 타이밍이 아닌 런타임 시점에 그 객체가 가지고 있는 주소가 부모의주소인지 자식의주소인지에 따라
어떤테이블에 참조할수있는지 결정된다
호출하는 주체의 주소에 따라결정된다.
객체의 주소가 자식의 주소이냐 부모의 주소이냐에 따라 갈린다.
자료형은 부모지만 가지고있는주소가 자식의주소이면 자식의 함수를 부른다.

상속 = 컴파일타이밍 (속도빠름)
런타임 = 동적인 타이밍 (속도느림)
*/
int main()
{
    return 0;

}

