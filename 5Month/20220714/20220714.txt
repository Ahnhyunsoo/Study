게임내에서 카메라를 셋팅한다.
엔진에 클라이언트에서 사용해야할 카메라들의 부모클래스를 만든다.
엔진에 클라이언트의 카메라클래스의 부모가 되는 CCamera 클래스 생성
보통 정말 특이한 케이스를 제외하고는 카메라는 한개다.
여기서 특이한 케이스란 화면을 분할해서 각각의 카메라가 화면을 보여줘야할 때 이다.
모든 카메라는 게임내에서 움직임을 가져야한다. 때문에 트랜스폼 컴포넌트를 맴버로 가진다.
클래스안에있는 구조체를 접근할 때 전방선언으로 불가능하다. 꼭 헤더를 포함해줘야한다.
정보를 전달하기위해 구조체를 만든다.
로더에서 카메라 원형을 만든다.
복제할 때 인자로 Arg를 추가하고 이 Arg에 추가해줄 인자들을 담는 구조체를 선언하고 초기화해준다.
Far는 프레임자신있으면1000 자신없으면 300
트랜스폼은 카메라의 정보가 하나도없다. 항등상태이다.
그래서 받아온 카메라의 정보를 트랜스폼에 동기화 시켜줘야한다.
부모함수에서 받아온구조체의 값으로 내 정보를 동기화시켜준다.
즉 여기서 동기화란 카메라를 월드내에 배치된것이다.
클라이언트의 카메라가 엔진의 부모카메라를 상속받는순간 트랜스폼을 갖게된다. 그리고 이 트랜스폼을 동기화시켜주는 작업을 한거다.
트랜스폼이 TransformDESC을 갖고있는데 카메라DESC도 TransformDESC를 갖고 있다. 이게 살짝 문제

예시로 표현해주면
구조체를 하나더만들고
이구조체안에 카메라 디스크립션이랑 트랜스폼디스크립션을 모두갖게 하고
넘겨줄 때 카메라 디스크립션만 넘겨주는식으로 나누면 해결되긴한다.
트랜스폼이 가지고있는 역행렬을 구한다.
트랜스폼이 들고있는 월드행렬의 역행렬을 구하면 그게 뷰스페이스다.
카메라 월드행렬의 역행렬을 모두 바인드해주면 모든 정점들이 뷰스페이스로 전환된다.
트랜스폼에 뷰행렬 바인드해주는 함수를 만든다.

카메라 완성끝
카메라프리의 원형객체초기화함수에서 부모의 원형객체초기화함수를 호출해줘야함

타임델타 수정
엔진에 타이머 클래스 생성 

타이머 매니저 클래스 생성

변수뒤에 Acc를 붙히면 누적한다는 뜻이다.

타임델타 구현

프레임 띄우기