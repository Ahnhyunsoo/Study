랜더링 파이프를 다 설명한 후 코드를 구현하겠다.
3차원 공간에서 z의좌표를 소거하면 2차원 공간에서의 x,y축만 남는다.
2차원 좌표를 투영공간이라고 한다.
3차원 좌표를 z축값을 소거해서 2차원 좌표에 옮겨놓으면 카메라의 시점이 아닌
원점 기준이 된다. 그래서 카메라의 중점을 원점으로 옮겨야하는데 이 때 카메라에 담긴 오브젝트들도 모두 같이 옮겨줘야한다.
월드 스페이스 = 원점 기준으로 표현된 3차원 좌표계
뷰 스페이스 = 카메라 기준으로 표현된 3차원 좌표계
월드 스페이스에 있는 정점들을 뷰 스페이스로 변환하기 위한 뷰 행렬을 만들어야한다. 이 땐 z축 양의 방향을 바라보기 위해
같은 뷰 행렬을 곱해주면 된다. 이 뷰 행렬은 프레임마다 1개만 존재하면 된다. (카메라가 원점으로 오기위한 상태행렬하나를 모든 정점에 다곱하면 된다.)
D3DXMatrixLookAtLH(결과, 카메라의 위치, 카메라가 바라보는 점, 월드공간의 Y축벡터) = 월드스페이스를 뷰스페이스를 만들어주는 행렬을 구한다.
즉 카메라 월드행렬의 역행렬을 구해준다.
카메라의 로컬스페이스 상태가 곧 뷰스페이스이다.
카메라 월드행렬의 역행렬
0,1,0 벡터와 look 벡터를 외적하면 right벡터가 구해진다. 외적하면 카메라의 up이 구해진다.
뷰스페이로 이동하는 작업이후에 2d로 변환해야한다. z축을 소거하는 작업을 한다.
SetTransform월드 함수는 각 객체의 랜더함수로 가야한다.
SetTransform뷰 함수는 메인의 랜더에서 존재하면된다. 같은 뷰행렬을 곱하기 때문이다.
z를 그냥 소거해버리면 원근감 표현이 안된다.
z를 소거하기전에 x,y를 z로 나눠주면 된다.
이 작업을 원근투영 이라고 부른다. 이 원근투영은 정점의 x,y,z를 z로 나눠준다.
좌표상으로 x와 z가 같다면 45도상에 있다는 것이다. 오른쪽으로 45도 왼쪽으로 -45도 영역에 있는 얘들이 모니터에 찍힌다.
카메라의 줌인효과는 각도를 좁힌다. 이 좁힌 각도안에 있는 오브젝트들을 모니터상에 표현할 때 들어온 객체를 늘려서 표현한다.
찍힌 그대로 모니터에 찍으면 공간이 남는데 이 방지를 위해서 찍힌 객체를 늘려서 표현한다.
때문에 각도를 설정할 수 있는 상태를 만들어줘야한다.
그걸 위해서 

여기서 fov는 설정하고 싶은 카메라의 각도이다.
tan45도는 1이다.
탄젠트의 각도를 줄이면 확대된다.
결국에 z나누기를 하지만 z나누기를 하기전에 투영행렬을 곱해준다.
이게 바로 투영행렬의 원리이다.
z나누기 하기전에 무조건 투영행렬을 곱해서 내가 원하는값으로 투영될수있도록 해줘야한다.
랜더할 때 z테스트를 하기 때문에 z를 소거하면 안된다. 즉 z소팅을 하려면 z값이 필요하다.
가장 먼 z는 1이고 가장 가까운 z는 0이다.
여기서 n은 카메라가 볼수있는 가장가까운z값이고 f는 카메라가 볼수있는 가장 먼 z값이다.
near를 0으로 쓰면 안된다. 연산할 때 0나누기가 발생하여 오류가 발생한다.
그래서 보통 0에 가까운 0.1같은 값으로 잡는다.
z나누기를 했을 때 0또는 1이 나오게끔 값이 0이나 f가 나오도록 유도한 것 이다.
투영행렬을 곱할 때 x와y는 늘리거나 줄여주고 z값은 0 에서 f 사이의 값을 구해준다.
w에 z를 보관한다. 실제로는 w나누기를 한다. 투영행렬을 곱하기 이전의 뷰스페이스에서 정점의 z값을 w에 보관하기 때문에
z나누기는 실제로 w나누기를 의미한다.
그 저장한 w로 x y z w 를 나누면 w는 1이되고 z 는 0~1이 된다.
오지게 중요하다 복습 잘하자.

x y z 1							x`,y`,z`
     1		0		0		0
tan(fov/2)

0		1		0		0   이건 투영행렬이다.
	       tan(fov/2)				    이 투영행렬을 곱해도 뷰 스페이스에 그대로 있다.
						    투영스페이스로 가려면 z나누기 연산을 한 후에 이동해야한다.
0		0		f		1 
			          f - n			

0		0		-f*n		0
				-f-n