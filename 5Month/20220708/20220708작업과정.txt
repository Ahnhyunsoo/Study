★1 - 프로젝트 생성하기★
1. 빈솔루션 0630Framework로 생성

2. Win32프로젝트 Client생성

3. Win32프로젝트 DLL 빈프로젝트 Engine생성

4. 생성한 프로젝트 폴더에 들어가서 생성된 폴더들 Default폴더 생성후 집어넣기 클라이언트,엔진 둘다만들어줘야함.
(프로젝트의 경로를 Default로 옮겼으니 솔루션에서 기존프로젝트 삭제 후 다시 기존항목으로 추가해줘야함. 자세한 설명은 2-4번에서)

5.Default폴더 생성후 이어서 Bin, Public, Private폴더 만들어주기 클라이언트는 Recource폴더도 만들어줘야함.

6. 솔루션 경로에 Reference폴더 생성후 이 폴더안에 Headers폴더와 Librarys폴더 생성해주기

7. 배치파일을 미리 만들어주자. 솔루션위치에( 솔루선명.sln이 있는위치) UpdateLib라는 메모장을 만든 후 확장자명을 bat으로 변경해주자
(만약 확장자명이 안보인다면 폴더상단탭에 보기클릭 후 우측에 파일 확장명체크박스를 체크해주면 된다.)
생성된 배치파일을 Visual Studio에 드래그앤드랍을 한다.
그럼 코드입력창이 뜨는데 거기에
xcopy /y .\Engine\Public\*.h				.\Reference\Headers\
xcopy /y .\Engine\Bin\*.lib				.\Reference\Librarys\
xcopy /y .\Engine\Bin\*.dll				.\Client\Bin\
이 코드를 입력한 후 저장해주자. (참고로 이코드는 Dos명령어 인데 이해할 필요없으니 쌤이 작성해준 코드를 복붙해서 썻다.)
Engine의 헤더를 수정하면 반드시 이 배치파일을 한번 실행시켜주자. 수정한 후 빌드를 하면 라이브러리 내용이 변경되기 때문에 배치파일로
변경된 라이브러리, 헤더 dll파일을 갱신시켜줘야한다. 일일이 갱신하기 귀찮으니 배치파일을 생성한 것


★2 - 경로 잡아주기 ★
(지금부터 경로를 잡아주자. 
그전에 구성에서 실행환경을 설정해줘야함. 
릴리즈인지 디버깅인지 32비트인지 64비트인지 설정을 해줘야하는데
프로젝트 우클릭 -> 상단에 구성에서 모든구성에 64비트로 잡아준다.)

1. 클라이언트 속성에서 속성 -> 일반 -> 출력디렉터리 ../Bin/으로 설정해주기
엔진 프로젝트도 똑같이 반복

2. 클라이언트 속성에서 VC++ 디렉터리 포함디렉터리에 $(DXSDK_DIR)\Include 포함해주기 (다이렉트경로를 상대경로로 잡아주는것)
라이브러리디렉터리에 $(DXSDK_DIR)\Lib\x64 포함해주기 (API땐 32비트기반이여서 x86으로했지만 SR은 64비트이기떄문에 x64로작성해주기)
엔진 프로젝트도 똑같이 반복

3. 클라이언트 속성에서 C/C++ 일반탭에서 추가 포함 디렉터리에 ../../Reference/Headers , ../Public  포함해주기

4. 엔진 속성에서 C/C++ 일반탭에서 추가 포함 디렉터리에 ../Public 포함해주기
(여기서 잠깐!! 만약 C/C++탭이 안뜬다면? 이 때 당황하지말고 Base클래스를 생성해주자. 최소 하나의 cpp가 있어야 C/C++탭이 뜬다.)
(CBase를 생성하려는데 스크립트 오류가 뜬다면 Engine프로젝트의 경로를 Default로 변경후 프로젝트를 갱신안해준 것 이다.
때문에 솔루션탐색기에서 엔진프로젝트를 삭제하고 솔루션 -> 추가 -> 기존프로젝트 -> Engine->Default-> Engine.vcxproj를 추가해주자)

5. 클라이언트 속성에서 링커 -> 일반탭에서 추가 라이브러리 디렉터리에 ../../Reference/Librarys/ 포함해주기

6. 클라이언트 속성에서 링커 -> 입력탭에서 추가종속성에 Engine.lib 포함해주기

7. 엔진 속성에서 링커 -> 입력탭에서 추가종속성에 d3d9.lib , d3dx9.lib 포함해주기

★3 - Engine 프로젝트 헤더, cpp 작성 ★
(지금부터 엔진 프로젝트의 헤더와 클래스를 작성한다.
 ★코드에 주석이 있지만 한번 설명한 코드는 다시 주석을 달지 않으므로 참고★
필터는 프로젝트에 나와있으니 따로 언급안함)

1. CBase클래스 생성 (우선 생성과 경로설정만 해두고 코드는 아래 Engine헤더들을 구현한 후 해주자.)
앞으로 클래스를 생성할 때 헤더와 cpp 저장경로를 
헤더 = ../Public/CBase ,  cpp = ../Private/CBase 이런식으로 미리 만들어둔 폴더의 경로로 설정해주자. 
설정을 안해주면 생성한 후 위치를 옮기고 솔루션에서 제거한 후 다시 기존항목으로 추가해야한다. 미리 경로를 잡아주는게 편하다.

2. Engine_Defines.h, Engine_Function.h, Engine_Fuctor.h, Engine_Macro.h, Engine_Struct.h, Engine_Typedef.h 작성하기
(헤더를 다 작성했는데 만약 list,map과 같은 std 헤더들을 포함할수없다고 오류뜨면 프로젝트 속성에서 VC++ 디렉터리에서
포함디렉터리와 라이브러리디렉터리에서 아래 부모또는 프로젝트 기본값에서 상속 체크박스를 체크해주자.)

3. CBase클래스 헤더,cpp 코드 작성

4. Graphic_Device 클래스를 생성해준다. Graphic, Input, Sound등 여러 장치가 있지만 우선 Graphic장치만 생성해주자.

5. Level 클래스 생성

6. Level_Manager 클래스 생성

7. GameObject 클래스 생성 

8. Layer 클래스 생성

9. Object_Manager 클래스 생성

10. GameInstance 클래스 생성

11. 여기까지 작성했으면 엔진은 모두 작성했으니 배치파일 한번 실행시켜준다.

★4 - Client 프로젝트 헤더, cpp 작성 ★
(지금부터 클라이언트 프로젝트의 헤더와 클래스를 작성한다.
 ★코드에 주석이 있지만 한번 설명한 코드는 다시 주석을 달지 않으므로 참고★
필터는 프로젝트에 나와있으니 따로 언급안함)

1. Default에 있는 Client.cpp 수정해주기 전역핸들 선언 및 초기화, GetMessage -> PeekMessage로 변경, MainApp 객체생성 및 함수호출
코드양이 많아서 찾기힘들테니 추가해야할 부분은 주석으로 -------------------- 이렇게 표시해두겠음
MainApp클래스를 구현하기 전에 작성하는거라 컴파일러 오류가 발생하지만 오타가 아닌이상 무시해주기 MainApp클래스 생성시 다 사라짐

2. Client_Defines 생성 (생성할 때 찾아보기로 경로설정해주기 따로안하면 Default 경로에 생성됨)

3. MainApp 클래스 생성

4. BackGround 클래스 생성

4. Level_GamePlay 클래스 생성

5. Level_Logo 클래스 생성

6. Loader 클래스 생성

7. Level_Loading 클래스 생성

8. 여기까지 작성했으면 클라이언트 또한 모두 작성했으니 배치파일을 한번더 실행해주고 프로젝트 껏다 다시킨후 실행시켜보자

여기까지 다 주석보면서 공부했는데도 모르는부분 있으면 질문해주세요 질문환영 친절하게 답변해드립니다



