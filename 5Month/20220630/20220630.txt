오브젝트매니저에서 삭제를 진행해주고
public Tick이라는 함수를 만든다. 매프레임마다 갱신해준다는 기능
깊이버퍼에 의한 소팅과 랜더가 있기 때문에 오브젝트매니저에 랜더는 구현하지않는다.
로더에서 객체원형을 생성해주는 작업을 한다.

이작업을 위해서는 로더에 게임인스턴스를 받아놓는다.
GetInstance로 객체를 받아오면 항상 Safe_AddRef와 다쓰고나서 함수마지막에 Safe_Release를 잊지말고 실행해주자.

원형을 생성할 대 오브젝트태그와 실제 객체를 넘겨줘야하니 원형객체::Create를 생성해서 인자로 넘겨주면된다.

사본객체는 로더가아닌 실제 레벨에서 생성해준다. 그래서 로딩클래스에 레이어를 생성하는 함수를 만든다.
Ready Layer BackGound 사본객체를 저장할 레이어를 만드는함수 인자로 레이어태그를 받는다.

게임인스턴스의 Add_GameObjejctToLayer호출 인자로 원형객체의태그와 레벨enum값 레이어태그와 보이드포인터를 넣어준다.

로딩에서 원형을 만든 후 레벨을 들어갔을 때 사본을 만든다. 그 후 틱과 레이트틱을 호출해준다.

레벨을 전환할 때 해당레벨에서만 사용하는 사본객체들은 지워줘야한다.

이 지워주는 시점은 배열로관리하기 때문에 언제바꿔도 상관은없다.

씬을 전환할 때 항상 로딩레벨로 전환후 로딩레벨생성할 때 인자로 장치와 다음전환할 레벨을 넣어준다.

사본삭제방법은 이렇게 레벨전활이 됐을 때 게임인스턴스의 클리어를 호출해주는게 하나의 방법이다.

OpenLevel에서 씬을 전환하기전에 기존레벨의 객체들을 지워주는 작업을 하는것도 하나의 방법이다.

GameInstance에 Clear함수를 구현해서 이전레벨에서 사용했던 객체와 리소스들을 지우는 작업을해준다.

오브젝트매니저에 클리어함수를 생성해서 인자로 레벨인덱스를 받아오고 인자로 받아온 레벨의 객체들을 삭제해준다.

인자로받은 레벨인덱스들의 객체들을 Safe_Release를 해주고 이작업이 끝난후 해당레벨인덱스를 클리어해준다.

이전레벨의 인덱스를통해 Clear를 해야하기때문에 Open레벨에서 현재레벨의 인덱스를 저장하기위해 인자를 하나 더 추가하고
이 인자로 받아온 인덱스를 변수에 저장해놓는다. 그래서 클리어할 때 기존인덱스를통해 삭제해주고 다시 새로운 레벨의 인덱스를 대입해주면 된다.

맨처음에 안들어오고 그다음에 로딩에서 사용했던 객체들을 삭제했다.