이미지를 출력한다면 반드시 모델을 구현해야한다.
실제 모델을 만들 때 사각형을 만든다는 개념은 존재하지 않는다.
우선 점을 찍는다는 개념이 존재하고 점을 찍는다는 행위를 버텍스를 생성한다 라고 한다.
실제 이 점들을 이어서 화면에 형태를 만들어 그린다.
라인 하나도 모델에 포함된다.
보통은 점 3개를 이어서 삼각형을 그린다라는 개념으로 접근한다.
수많은 점들로 많은 삼각형을 그리고 이 삼각형이 모여서 모델을 구성하게 된다.
삼각형은 최소의 정점으로 만들 수 있는 면이다. 그리고 삼각형으로 모델을 구성했을 때 디테일한 묘사가 가능하다.
랜더를 했을 때 백그라운드에 대한 모델을 생성해주는 작업을 해야한다.
모델에 대한 색을 설정해주는 작업을 텍스처를 로드해와서 작업을 해준다.
DX에서 점을 그리기위한 구조체를 제공해주지않을가? 이런생각을 할 수 있지만 제공해주지 않고 있다.
정점에게 텍스처에서 어떤 부분의 색을 가져올건지 셋팅해줘야 한다.
지형같은 경우에는 어떤부분은 빛을 받고 어떤부분은 빛을 안받는다. 이걸 구현하려면 법선벡터가 필요하다.
정점의 자료형은 보통 구조체로 선언하고 정점안에 선언할 수 있는 최대 맴버변수의 갯수 64개이다.
이 구조체를 만들 때 변수를 직접 지정해주는걸 정점의 커스터마이징이라고 한다.
DX가 정점안에 선언될 수 있는 변수들을 제공해주고 있다.
정점에게 필수적으로 필요한 맴버는 위치이다. 즉 위치벡터는 꼭 잇어야한다.

렌더링 파이프라인
모든 정저에선 위치가 필요하다.
위치를 나타내려면 3차원 좌표계가 반드시 필요하다.
모델링을 편하게 하기위해서 즉 점을 쉽게 찍기위해서 3DMAX나 블랜더, 마야등 이런 프로그램들을 사용한다.
메쉬는 삼각형들의 집합이라고 부른다.
점을 2개 이으면 라인
점3개를 이으면 삼각형(폴리곤)
이 삼각형을 연결하면 메쉬 라고한다.
플레이어를 그리기위한 3차원스페이스를 구현하고 그리고 난 후 이 스페이스는 로컬 스페이스다.
로컬스페이스란 즉 종속적인 스페이다. 하나의 객체만들 위한 스페이스다. (지역적인 공간)
이후 독립적인 스페이스에서 만들어진 객체들을 월드 스페이스에 옮겨두는 작업을 한다.
이 스페이스는 월드스페이스라고 하며 객체들이 모두 모이는 3차원좌표계의 스페이스다.
로컬스페이스내에서 정의됐던 모든 위치들을 내 월드스페이스(게임셰계)에 원하는 크기로 원하는 위치에 배치해주는 작업을 해야한다.
월드행렬을 객체마다 전부다 필요하다. 월드스페이스에 이동시킬라면 객체마다 배치될 상태가 다르기 때문에 월드행렬이 여러개 필요하다.
월드스페이스상에 어떻게 배치되길 원하는지를 만들며된다. 캐릭터가 등돌려야 좌표계를 그대로 사용할 수 있다.

로컬에서 변환해주기위한 행렬을

world right 0	0	-1	0
world up    0	1	0	0
world look  1	0	0	0
wd position 5	0	5	1

월드상에서 방향벡터의 w는0 위치벡터의 w는1

cos(90) = 0
sin(90) = 1

행렬과 행렬을 곱하면 행렬을 더한 결과값과 같다.
내 기준으로 방향벡터에 따른 결과값에 따라서 설정해주면 된다.
로컬스페이스 상태에서 나의 라이트 업 룩을 기준으로 회전하거나 했을 때 설정해주면 된다.

이래서 모델이 등을 보고있는상태가 편한 이유가 그대로가 룩 업 라이트에 올바르게 방향이 적용되기 때문이다.

월드행렬은 단순히 벡터4개를 표현한 벡터다.

월드변환 행렬이 벡터에 필요한 자료들을 가지고있다.

이제부터 현재객체가 바라보는방향으로 가기위한 행렬을 정의하기위해서
내행렬의 3행정보를 가져온다. 3행정보는 Look벡터이고
4행정보도 가져온다. 4행정보는position이기 때문에 더해준다.
그래서 가져온 look을 더해주면 position이 해당하는 look으로 이동한다.

새로운 컴포넌트를 하나 생성하고 이 컴포넌트의 이름은 트랜스폼이다.

만들어준 로컬에 정점들을 월드로 갔을 때에 변환시키기위한 자신의 월드행렬을 만들어주고 이걸 정점에 곱하면 월드스페이스내에
원하는대로 배치된다.

스케일 정보를 가져오려면 1.1 2.2 3.3이 아니라 
right벡터의 길이가 x스케일
up벡터의 길이가 y스케일
look벡터의 길이가 z스케일 이다.
1.1,2.2,3.3은 회전이 있을때만 성립한다.

이런 행렬을 상태행렬이라고도하고 또다른 말로 직교행렬이라고도 한다.
라이트와 업과 룩이 항상 수직이여야한다.
이 수직이 깨지는순간 정점들이 이상해진다.
메쉬의 랜더링이 이상할때는 행렬의 수직이 문제가 있는지 확인해봐야한다.

트랜스폼 컴포넌트는 맴버변수로 월드변환 행렬을 갖고있는다.

스페이스의 변환을 행하는 이유
로컬스페이스의 정점들을 월드스페이스에 원하는대로 배치를 한다.
모니터와 윈도우는 무조건2차원이야. 이 정점들을 월드까지 옮기기위한 월드행렬을 만들고
모든 정점들에 월드행렬을 만들고 정점들에 월드행렬을 곱한 이유가 3차원스페이스를 구현하기 위해서이다.
모니터에 출력할 때는 다시 2차원으로 치환해야한다.
모든정점들이 랜더링하기위한 흐름을 따라가야하는데 이걸 렌더링 파이프라인이라고 한다.
랜더링 파이프라인은 3차원네 구성한 정점들을 윈도우상에 2차원으로 치환해서 픽셀을 만들어주고 이 픽셀들을 백버퍼에 출력해주는 작업이다.

장치객체에는 SetTransform이라는 함수가있고 인자로 D3DTS_WORLD, 월드행렬을 set해준다.
이 setTransform으로 셋팅할수있는 행렬은 월드행렬,뷰행렬,투영행렬이다.

이 함수를 실행하는순간 장치에 셋팅한 월드행렬을 스스로 곱해서 임시변수에 저장한다.

로컬상에 모델을 만들고 이 점들을 공유하는 두개의 객체가 존재한다.
우선 월드행렬으로 그리고 두번 째 객체를 그릴 때 처음그릴 때 셋팅했던 월드행렬이 그대로 곱해진다.
로컬좌표는 그대로인데 곱해주는 행렬이 바뀐다.

Set했다고해서 월드행렬이 곱해지는게아니다. 랜더링 해야 곱해지는거다.
이 비교하는 두개의 정점 모두 로컬스페이스에 존재하기 때문에 충돌처리가 안된다.
항상 작업을 할 때 내가 어떤스페이스의 정보를 가져왔는지 고려해야한다.
월드행렬의 4행을 가져오면 월드스페이스의 위치를 가져온거다. 그리고 정점을 가져오면 로컬의 위치를 가져오는거다
때문에 이 두개를 비교하면 작업이 제대로 이루어지지 않는다.

