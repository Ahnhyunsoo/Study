그래픽디바이스를 클라이언트에서 사용하기위해 라이브러리화를 하긴했지만
이 그래픽디바이스내의 모든 함수를 클라이언트에서 사용하는것은 아니다.
그래서 클라이언트에서 사용하지않는 함수까지 모두 라이브러리화 하기때문에 문제가 있다.

그래서 클라이언트에서 사용하는 기능만을 포함한 클래스를 하나 더 작성해서 이 클래스를 라이브러리화 시킨다.

GameInstance필터 생성 -> CGameInstance클래스 생성
CGameInstance클래스를 싱글톤으로 만든다.

GameInstance는 Graphic_Device 객체를 포인터변수로 저장하고 함수내에서 호출만하는 링커역할을 하는 클래스이다.

앞으로 싱글톤들은 게임인스턴스에 선언을 해주고 필요한 함수들만 연결해주는식으로 구현한다.

GameInstance에서 이니셜라이즈엔진함수를 구현한다.
이 함수 안에선 그래픽디바이스초기화 입력디바이스초기화 사운드디바이스초기화 등 각종 초기화작업의 기능이 있다.

함수에 필요한 인자가 많으니 구조체로 만든다.

전방선언할 때 네임스페이스를 신경써야한다.

릭체크는 디버그모드일 때만 작동하게끔 ifdef DEBUG를 해줘야한다.

void Release_Engine 함수를 구현하고 이 함수안에서 게임인스턴스의 디스트로이인스턴스 호출 그래픽디바이스 안에서 디스트로이인스턴스 호출

Release Engine에서 가장먼저 GameInstance를 삭제해주면 맴버들의 래퍼런스카운트가0이 되고 그다음에 
나머지 변수 싱글톤들의 디스트로이를 호출해주면 모두 깔끔하게 삭제된다. 전제조건으로 GameInstance Release를 가정먼저 호출해야한다.

Level = Scene

레벨 매니저를 엔진에 구현하고 엔진에있는 레벨부모클래스를 생성해서 클라이언트에서 이 부모클래스를 상속받게 구현한다.

인자로 디바이스를 넣어줘서 편하게 쓸수있게 구현한다.

게임인스턴스에 필요한 함수들을 빼서 구현한다.

레벨을 할당하고 넘어가게

게임을 키면 무조건 로딩으로 들어오게

그다음 로고로 들어오고

로고레벨에서 씬을 바꾼다라고하거나 몇초가지나는등 조건이 해당하면 다시 로딩으로 들어가고

이 로딩이 끝나면 게임플레이로 들어가게 만든다.

로딩쓰레드를 이용해서 로딩씬을 구현한다. 로딩쓰레드 복습하기