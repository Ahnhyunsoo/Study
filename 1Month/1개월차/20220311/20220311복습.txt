파일 입출력
버퍼 함수 = 버퍼(데이터를 임시 저장하기위한 메모리 블럭)를 비우기 위한 함수
비우다 = 삭제의 의미가 아니라 버퍼 공간에서 목적지까지 강제로 이동시키는 것을 의미

출력 버퍼 비우기 함수 = fflush(stdout)

콘솔 입출력의 경우 스트림 생성, 소멸을 운영체제가 알아서 진행해줬다. 스트림 자체가 시스템 자원이기 때문에 가능하다.
파일 입출력의 경우 핸들을 직접 생성, 소멸 해야하기 때문에 이와 관련된 함수들을 알아야 한다.

바이너리 모드 입출력 = 여러 자료형을 저장 또는 불러오기 하기 위해 사용한다.

파일 입출력의 기본 순서 = 개방 -> 쓰기 또는 읽기 -> 소멸
fopen_s = 파일 개방 함수 ex) fopen_s(Output인자 , 파일의경로, 파일모드)
fclose = 파일 소멸 함수 ex) fclose(파일변수명)

errno_t = 에러를 검출하기 위한 함수 결과값이 0이면 에러가 없다.

파일 입출력에서 문자열의 끝은 Null이 아닌 eof로 판단한다 (eof는 -1)

바이너리모드 입력 = fread(어디에 , 얼마만큼크기 , 몇번, 파일변수)
바이너리모드 출력 = fwrite(어디에, 얼마만큼크기, 몇번, 파일변수)

fSeek(개방한스트림 , 바이트수, 옵션)
SEEK_SET = 처음으로
SEEK_CUR = 현재위치부터
SEEK_END = 끝으로
ftell = 현재 프롬프트의 위치를 알려주는 함수 ( 반환값 = 정수형 )
feof = 파일의 끝의 유무를 알려주는 함수
============================================================================
래퍼런스
C++에 와서 등장한 문법 변수 이름에 또다른 이름을 부여하는 문법 동작은 포인터와 유사하게 동작
래퍼런스는 자료형이지 변수가 아니다.
래퍼런스는 선언만 하는건 불가능하다. 선언과 동시에 참조할 값을 초기화 해줘야한다.
래퍼런스는 참조만 하기위해 탄생한 문법이므로 한래퍼런스당 한가지만 참조가능하다. 메모리공간을 갖지도 않는다. 