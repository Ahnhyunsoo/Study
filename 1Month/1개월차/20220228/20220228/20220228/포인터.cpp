#include <iostream>

using namespace std;

void main(void)
{
#pragma region 포인터 기본문법
	
	//int iA = 10;
	////int* p = &iA; // int 포인터형 p(int형 변수의 주소값을 저장하는 용도)
	////int* p = nullptr;  0으로 초기화
	//int* p = nullptr;

	//p = &iA;  //& = 비트단위 연산자에선 and연산자이지만 변수앞에 쓰이면 address연산자 이다.

	//*p = 10;

	// // * = 포인터 연산자 : 포인터가 가진 주소 공간의 값을 가리키는 연산자
	//
	//cout << iA << endl;
	//
	//int iB = 20;

	//p = &iB; // 포인터는 변수이기 때문에 코드 라인의 변화에 따라 저장하는 주소 값이 달라질 수 있다.

	//*p = 400;

	//cout << (*p) << endl;
#pragma endregion 포인터 기본문법


#pragma region 포인터 기본문법2
	/*
	int* p = nullptr;

	//포인터의 용량 = 32비트환경 기준 4바이트
	
	32바이트 기반에서 어떤 자료형의 포인터건 크기는 4바이트이다.
	운영체제의 발전에 따라 포인터의 크기도 항상 변해왔다.

	cout << sizeof(p) << endl;
	*/
	
	int iA = 0;

	int* p = &iA;

	//(*p)++;

	//포인터 연산 : 포인터가 가진 자료형만큼 주소값을 이동
	cout << p << endl;
	p++; // 포인터가 가진 값(주소 값)을 이동
	cout << p << endl;
	cout << iA << endl;

	
#pragma endregion 포인터 기본문법2
}





/*메모리 공간에 접근하는 방법
직접 접근 이름을 이용한 접근
간접 접근 주소를 이용한 접근
포인터 = 주소를 저장하기 위한 변수
주소를 통해 메모리에 접근하기 위해서
포인터는 주소값을 저장하기 위한 변수다


주소값을 사용해야 하는 이유
메모리 공간에 접근하는 방법은 변수의 이름을 통한 접근과 주소 값을 통한 접근이 있다.
직접 접근의 경우 메모리의 특성에 맞게 하나의 파일 안에서만 사용 가능하거나(전역변수)
중괄호 안에서만 유효성을 갖는 특징을 지닌다(지역변수)
사용의 권한을 늘리고 여러 군데에서 사용 가능한 상태를 만들기 위해 포인터를 사용한다.

참조 : 주소값을 통해 메모리 공간에 접근하는 행위
1바이트당 하나의 주소값을 가진다. ex) int형 변수는 4바이트이기 때뭉네 주소 값을 4개 가진다.
그중에 가장 빠른 번지 수의 주소를 대표 주소라 한다.


*/



/*과제

int iA = 10, iB = 20;

cout << iA << "\t" << iB << endl;

? : 함수와 포인터를 통해 두 숫자를 교환하여 출력하라

힌트 : 

int iTemp = iA;
iA = iB;
iB = iTemp;

스왑 (swap)

cout << iA << "\t" << iB << endl;

*/